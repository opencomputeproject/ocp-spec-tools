# Reusable workflow to render the spec for a variety of purposes.
# https://docs.github.com/en/actions/using-workflows/reusing-workflows

name: render

on:
  workflow_call:
    inputs:
      container:
        description: the Docker container to use (default is trustedcomputinggroup/pandoc)
        required: false
        type: string
        default: ghcr.io/trustedcomputinggroup/pandoc
      tcg-container-version:
        description: the released version of the Docker container to use
        required: true
        type: string
      ocp-template-ref:
        description: Git branch, tag or SHA for opencomputeproject/ocp-spec-tools template resources
        required: true
        type: string
      inputs:
        description: a JSON string representing a list of inputs to render
        required: true
        type: string
      append_git_rev_to_version:
        description: Append "(Git commit ${commit_hash})" to the version string
        required: false
        type: boolean
        default: false
      pdf:
        description: 'Render to PDF'
        required: false
        type: boolean
        default: false
      html:
        description: 'Render to HTML'
        required: false
        type: boolean
        default: false

jobs:
  render:
    strategy:
      matrix:
        item: ${{ fromJson(inputs.inputs) }}
    runs-on: ubuntu-latest
    container:
      image: ${{ inputs.container }}:${{ inputs.tcg-container-version }}
    name: Render
    steps:
      # Use the input file name (no extension) as the base filename for the output
      - name: Calculate output file name
        id: gen_output_name
        run: |
          filename=$(basename ${{ matrix.item }})
          filename="${filename%.*}"
          echo OUTPUT_FILENAME="${filename}" >> "$GITHUB_OUTPUT"
          echo output filename: ${filename}

      - name: Checkout inputs
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.revision }}
          fetch-depth: 0
          fetch-tags: true

      - name: Checkout OCP template resources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          repository: "opencomputeproject/ocp-spec-tools"
          ref: ${{ inputs.ocp-template-ref }}
          # The underlying tex and templates assume this exists under the "extra" folder.
          path: "extra"

      # Use input file and container version in the cache key so that the cache
      # is invalidated upon file change or container version change.
      - name: Restore cached files
        id: cache-restore
        uses: actions/cache/restore@v4
        with:
          path: .cache/**/*
          key: cache-${{ matrix.item }}-${{ inputs.tcg-container-version }}-${{ inputs.ocp-template-ref }}-${{ github.run_id }}
          restore-keys: cache-${{ matrix.item }}-${{ inputs.tcg-container-version }}-${{ inputs.ocp-template-ref }}

      # Let the container take ownership of the repo dir, in case the user wants to check in the results.
      # Workaround to https://github.com/actions/runner/issues/2033
      - run: chown -R $(id -u):$(id -g) $PWD
        shell: sh

      # The sed command handles the following transformations:
      # `version: 1.3` --> `version: 1.3 (Git commit xyz)`
      # `version: "2.0"` --> `version: "2.0 (Git commit xyz)"`
      - name: Append git revision to version string
        if: inputs.append_git_rev_to_version != ''
        run: |
          sed -i -r "/^---$/,/^---$/s/^(version: \"?[^\"]*)(\"?)$/\1 (Git commit $(git rev-parse --short HEAD))\2/g" ${{ matrix.item }}

      # Perform the render.
      - run: >
          /usr/bin/build.sh
          --nogitversion
          --crossref=tcg
          --csl extra/ocp-pandoc-resources/ieee.csl
          --template extra/ocp-pandoc-resources/pdf/ocp.tex
          --template_html extra/ocp-pandoc-resources/html/ocp.html.template
          --html_stylesheet extra/ocp-pandoc-resources/html/style.css
          $( ${{ inputs.pdf }}  && echo --pdf=${{ steps.gen_output_name.outputs.OUTPUT_FILENAME }}.pdf )
          $( ${{ inputs.html }} && echo --html=${{ steps.gen_output_name.outputs.OUTPUT_FILENAME }}.html )
          ${{ matrix.item }}
        shell: sh

      - name: Save cached files
        id: cache-save
        uses: actions/cache/save@v4
        with:
          path: .cache/**/*
          key: cache-${{ matrix.item }}-${{ inputs.tcg-container-version }}-${{ inputs.ocp-template-ref }}-${{ github.run_id }}

      # Upload all workflow artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.gen_output_name.outputs.OUTPUT_FILENAME }}
          path: |
            ${{ steps.gen_output_name.outputs.OUTPUT_FILENAME }}.pdf
            ${{ steps.gen_output_name.outputs.OUTPUT_FILENAME }}.html
